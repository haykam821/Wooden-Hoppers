plugins {
	id "fabric-loom" version "1.4.1"
	id "maven-publish"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven {
		name = "Fabric"
		url = "https://maven.fabricmc.net/"
	}
}

sourceSets {
	main {
		resources {
			srcDirs += [
				"src/main/generated"
			]
		}
	}

	datagen {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
		compileClasspath += main.output
		runtimeClasspath += main.output
	}
}

loom {
	accessWidenerPath = file("src/main/resources/woodenhoppers.accesswidener")

	splitEnvironmentSourceSets()

	mods {
		woodenhoppers {
			sourceSet(sourceSets.main)
			sourceSet(sourceSets.client)
		}
	}

	runs {
		datagen {
			server()
			source = sourceSets.datagen

			name = "Data Generation"
			runDir = "build/datagen"

			vmArg("-Dfabric-api.datagen")
			vmArg("-Dfabric-api.datagen.output-dir=${file("src/main/generated")}")
		}
	}
}
assemble.dependsOn(runDatagen)

dependencies {
	// Main
	minecraft("com.mojang:minecraft:${project.minecraft_version}")
	mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2")
	modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")

	// Fabric API (helper)
	modImplementation(fabricApi.module("fabric-registry-sync-v0", project.fabric_version))
	modImplementation(fabricApi.module("fabric-data-generation-api-v1", project.fabric_version))

	// Fabric API (direct)
	modImplementation(fabricApi.module("fabric-item-group-api-v1", project.fabric_version))
	modImplementation(fabricApi.module("fabric-object-builder-api-v1", project.fabric_version))
	modImplementation(fabricApi.module("fabric-resource-loader-v0", project.fabric_version))
	modImplementation(fabricApi.module("fabric-transitive-access-wideners-v1", project.fabric_version))
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

jar {
	from "LICENSE"
	exclude ".cache/**"
}